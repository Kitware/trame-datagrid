trame_datagrid:
  widgets:
    datagrid:
      VGridVueEditor:
        component: v-grid-vue-editor
      VGridVueTemplate:
        component: v-grid-vue-template
      VGrid:
        help: Spreadsheet like component
        component: v-grid
        properties:
          - name: auto_size_column
            help: > 
              Autosize config Enable columns autoSize, for more details check @autoSizeColumn plugin By default disabled, hence operation is not resource efficient true to enable with default params (double header separator click for autosize) or provide config boolean \| { mode?: ColumnAutoSizeMode; allColumns?: boolean; letterBlockSize?: number; preciseSize?: boolean; } false
          - name: can_focus
            help: > 
              When true cell focus appear. boolean true
          - name: col_size
            help: > 
              Indicates default column size. number 100
          - name: column_types
            help: > 
              Types Every type represent multiple column properties Types will be merged but can be replaced with column properties { [name: string]: ColumnType; } {}
          - name: columns
            help: > 
              Columns - defines an array of grid columns. Can be column or grouped column. (ColumnRegular \| ColumnGrouping)[] []
          - name: editors
            help: > 
              Custom editors register { [name: string]: EditorCtr; } {}
          - name: exporting
            help: > 
              Enables export plugin Can be boolean Can be export options boolean false
          - name: filter
            help: > 
              Enables filter plugin Can be boolean Can be filter collection boolean \| { collection?: Record<ColumnProp, FilterCollectionItem>; include?: string[]; customFilters?: Record<string, CustomFilter>; } false
          - name: frame_size
            help: > 
              Defines how many rows/columns should be rendered outside visible area. number 1
          - name: grouping
            help: > 
              Group models by provided properties Define properties to be groped by { props?: ColumnProp[]; expandedAll?: boolean; } undefined
          - name: pinned_bottom_source
            help: > 
              Pinned bottom Source: {[T in ColumnProp]: any} - defines pinned bottom rows data source. DataType[] []
          - name: pinned_top_source
            help: > 
              Pinned top Source: {[T in ColumnProp]: any} - defines pinned top rows data source. DataType[] []
          - name: plugins
            help: > 
              Custom grid plugins Has to be predefined during first grid init Every plugin should be inherited from BasePlugin (typeof Plugin)[] undefined
          - name: range
            help: > 
              When true, user can range selection. boolean false
          - name: readonly
            help: > 
              When true, grid in read only mode. boolean false
          - name: resize
            help: > 
              When true, columns are resizable. boolean false
          - name: row_class
            help: > 
              Row class property Define this property in rgRow object and this will be mapped as rgRow class string ''
          - name: row_definitions
            help: > 
              Row properties applied RowDefinition[] []
          - name: row_headers
            help: > 
              Excel like show rgRow indexe per rgRow RowHeaders \| boolean undefined
          - name: row_size
            help: > 
              Indicates default rgRow size. By default 0, means theme package size will be applied number 0
          - name: source
            help: > 
              defines main data source. Can be an Object or 2 dimensional array([][]); Keys/indexes referenced from columns Prop DataType[] []
          - name: stretch
            help: > 
              Defines stretch strategy for columns with @StretchColumn plugin if there are more space on the right last column size would be increased boolean \| string true
          - name: theme
            help: > 
              Theme name "compact" \| "darkCompact" \| "darkMaterial" \| "default" \| "material" 'default'
          - name: trimmed_rows
            help: > 
              Trimmed rows Functionality which allows to hide rows from main data set { [x: number]: boolean; } {}
          - name: use_clipboard
            help: > 
              use-clipboard When true enable clipboard. boolean true
        events:
          - name: [after_column_resize, aftercolumnresize]
            help: > 
              After column resize Get resized columns CustomEvent<{ [x: string]: ColumnRegular; [x: number]: ColumnRegular; }>
          - name: [after_columns_set, aftercolumnsset]
            help: > 
              Column updated CustomEvent<{ columns: ColumnCollection; order: Record<ColumnProp, "desc" \| "asc">; }>
          - name: [after_edit, afteredit]
            help: > 
              After edit. Triggered when after data applied or Range changeged. CustomEvent<{ data: DataLookup; models: { [rowIndex: number]: DataType; }; type: DimensionRows; } \| { prop: ColumnProp; model: DataType; val?: string; rowIndex: number; type: DimensionRows; }>
          - name: [after_source_set, aftersourceset]
            help: > 
              After rows updated CustomEvent<{ type: DimensionRows; source: DataType[]; }>
          - name: [after_trimmed, aftertrimmed]
            help: > 
              Notify trimmed applied CustomEvent<any>
          - name: [before_range, beforerange]
            help: > 
              Before range apply. Triggered before range applied. Use e.preventDefault() to prevent range. CustomEvent<{ type: DimensionRows; newRange: RangeArea; oldRange: RangeArea; newProps: ColumnProp[]; oldProps: ColumnProp[]; newData: { [key: number]: DataType; }; }>
          - name: [before_auto_fill, beforeautofill]
            help: > 
              Before autofill. Triggered before autofill applied. Use e.preventDefault() to prevent edit data apply. CustomEvent<{ type: DimensionRows; newRange: RangeArea; oldRange: RangeArea; newProps: ColumnProp[]; oldProps: ColumnProp[]; newData: { [key: number]: DataType; }; }>
          - name: [before_cell_focus, beforecellfocus]
            help: > 
              Before cell focus changed. Use e.preventDefault() to prevent cell focus change. CustomEvent<{ prop: ColumnProp; model: DataType; val?: string; rowIndex: number; type: DimensionRows; }>
          - name: [before_column_applied, beforecolumnapplied]
            help: > 
              Before column applied but after column set gathered and viewport updated CustomEvent<{ columns: Record<DimensionCols, ColumnRegular[]>; columnGrouping: Record<DimensionCols, Group[]>; maxLevel: number; sort: Record<ColumnProp, ColumnRegular>; }>
          - name: [before_columns_set, beforecolumnsset]
            help: > 
              Before column update CustomEvent<{ columns: Record<DimensionCols, ColumnRegular[]>; columnGrouping: Record<DimensionCols, Group[]>; maxLevel: number; sort: Record<ColumnProp, ColumnRegular>; }>
          - name: [before_edit, beforeedit]
            help: > 
              Before edit event. Triggered before edit data applied. Use e.preventDefault() to prevent edit data set and use you own. Use e.val = {your value} to replace edit result with your own. CustomEvent<{ prop: ColumnProp; model: DataType; val?: string; rowIndex: number; type: DimensionRows; }>
          - name: [before_edit_start, beforeeditstart]
            help: > 
              Before edit started Use e.preventDefault() to prevent edit CustomEvent<{ prop: ColumnProp; model: DataType; val?: string; rowIndex: number; type: DimensionRows; }>
          - name: [before_export, beforeexport]
            help: > 
              Before export Use e.preventDefault() to prevent export Replace data in Event in case you want to modify it in export CustomEvent<{ data: DataType[]; } & ColSource>
          - name: [before_filter_apply, beforefilterapply]
            help: > 
              Before filter applied to data source Use e.preventDefault() to prevent cell focus change Update @collection if you wish to change filters CustomEvent<{ collection: Record<ColumnProp, FilterCollectionItem>; }>
          - name: [before_filter_trimmed, beforefiltertrimmed]
            help: > 
              Before filter trimmed values Use e.preventDefault() to prevent value trimming and filter apply Update @collection if you wish to change filters Update @itemsToFilter if you wish to filter indexes of trimming CustomEvent<{ collection: Record<ColumnProp, FilterCollectionItem>; itemsToFilter: Record<number, boolean>; }>
          - name: [before_focus_lost, beforefocuslost]
            help: > 
              Before grid focus lost happened. Use e.preventDefault() to prevent cell focus change. CustomEvent<{ model: any; cell: Cell; colType: DimensionCols; rowType: DimensionRows; column?: ColumnRegular; }>
          - name: [before_range_edit, beforerangeedit]
            help: > 
              Before range edit event. Triggered before range data applied, when range selection happened. Use e.preventDefault() to prevent edit data set and use you own. CustomEvent<{ data: DataLookup; models: { [rowIndex: number]: DataType; }; type: DimensionRows; }>
          - name: [before_sorting, beforesorting]
            help: > 
              Before sorting event. Initial sorting triggered, if this event stops no other event called. Use e.preventDefault() to prevent sorting. CustomEvent<{ column: ColumnRegular; order: "desc" \| "asc"; }>
          - name: [before_sorting_apply, beforesortingapply]
            help: > 
              Before sorting apply. Use e.preventDefault() to prevent sorting data change. CustomEvent<{ column: ColumnRegular; order: "desc" \| "asc"; }>
          - name: [before_source_set, beforesourceset]
            help: > 
              Before data apply. You can override data source here CustomEvent<{ type: DimensionRows; source: DataType[]; }>
          - name: [before_source_sorting_apply, beforesourcesortingapply]
            help: > 
              Before source update sorting apply. Use this event if you intended to prevent sorting on data update. Use e.preventDefault() to prevent sorting data change during rows source update. CustomEvent<any>
          - name: [before_trimmed, beforetrimmed]
            help: > 
              Before trimmed values Use e.preventDefault() to prevent value trimming Update @trimmed if you wish to filter indexes of trimming CustomEvent<{ trimmed: Record<number, boolean>; trimmedType: string; type: string; }>
          - name: [header_click, headerclick]
            help: > 
              On header click. CustomEvent<ColumnRegular>
          - name: [row_drag_start, rowdragstart]
            help: > 
              Row order change started. Use e.preventDefault() to prevent rgRow order change. Use e.text = 'new name' to change item name on start. CustomEvent<{ pos: PositionItem; text: string; }>
          - name: [row_order_changed, roworderchanged]
            help: > 
              Before rgRow order apply. Use e.preventDefault() to prevent rgRow order change. CustomEvent<{ from: number; to: number; }>
          - name: [viewport_scroll, viewportscroll]
            help: > 
              Triggered when view port scrolled CustomEvent<{ dimension: DimensionType; coordinate: number; delta?: number; }>
        methods:
          - name: [add_trimmed, addTrimmed]
            help: >
              Add trimmed by type (trimmed: Record<number, boolean>, trimmedType?: string, type?: RevoGrid.DimensionRows)
          - name: [clear_focus, clearFocus]
            help: >
              Clear current grid focus
          - name: refresh
            help: >
              Refreshes data viewport. Can be specific part as rgRow or pinned rgRow or 'all' by default. refresh(type?: RevoGrid.DimensionRows | 'all') => Promise<void>
          - name: [scroll_to_column_index, scrollToColumnIndex]
            help: >
              Scrolls view port to specified column index
          - name: [scroll_to_column_prop, scrollToColumnProp]
            help: > 
              Scrolls view port to specified column prop
          - name: [scroll_to_coordinate, scrollToCoordinate]
            help: > 
              Scrolls view port to coordinate
          - name: [scroll_to_row, scrollToRow]
            help: > 
              Scrolls view port to specified rgRow index
          - name: [set_cell_edit, setCellEdit]
            help: > 
              Bring cell to edit mode (rgRow: number, prop: RevoGrid.ColumnProp, rowSource?: RevoGrid.DimensionRows)
          - name: [update_column_sorting, updateColumnSorting]
            help: > 
              Update column sorting (column: RevoGrid.ColumnRegular, index: number, order: asc/desc)
          - name: [update_columns, updateColumns]
            help: > 
              Update columns (cols: RevoGrid.ColumnRegular[])